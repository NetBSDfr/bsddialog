.\"
.\" Copyright (c) 2021 Alfonso Sabato Siciliano
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd December 30, 2021
.Dt BSDDIALOG 3
.Os
.Sh NAME
.Nm bsddialog_backtitle ,
.Nm bsddialog_clearterminal ,
.Nm bsddialog_color ,
.Nm bsddialog_checklist ,
.Nm bsddialog_datebox ,
.Nm bsddialog_end ,
.Nm bsddialog_form ,
.Nm bsddialog_gauge ,
.Nm bsddialog_geterror ,
.Nm bsddialog_get_theme
.Nm bsddialog_infobox ,
.Nm bsddialog_init ,
.Nm bsddialog_initconf ,
.Nm bsddialog_menu ,
.Nm bsddialog_mixedgauge ,
.Nm bsddialog_mixedlist ,
.Nm bsddialog_msgbox ,
.Nm bsddialog_pause ,
.Nm bsddialog_radiolist ,
.Nm bsddialog_rangebox ,
.Nm bsddialog_set_theme ,
.Nm bsddialog_set_default_theme ,
.Nm bsddialog_textbox ,
.Nm bsddialog_timebox ,
.Nm bsddialog_yesno
.Nd TUI dialogs
.Sh LIBRARY
.Lb libbsddialog
.Sh SYNOPSIS
.In bsddialog.h
.Ft int
.Fn bsddialog_backtitle "struct bsddialog_conf *conf" "char *backtitle"
.Ft int
.Fo bsddialog_checklist
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int menurows"
.Fa "int nitems"
.Fa "struct bsddialog_menuitem *items"
.Fa "int *focusitem"
.Fc
.Ft int
.Fn bsddialog_clearterminal "void"
.Ft int
.Fo bsddialog_datebox"
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int *yy"
.Fa "unsigned int *mm"
.Fa "unsigned int *dd"
.Fc
.Ft int
.Fn bsddialog_end "void"
.Ft int
.Fo bsddialog_form
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int formheight"
.Fa "unsigned int nitems"
.Fa "struct bsddialog_formitem *items"
.Fc
.Ft int
.Fo bsddialog_gauge
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int perc"
.Fc
.Ft const char *
.Fn bsddialog_geterror "void"
.Ft int
.Fo bsddialog_infobox
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fc
.Ft int
.Fn bsddialog_init "void"
.Ft int
.Fn bsddialog_initconf "struct bsddialog_conf *conf"
.Ft int
.Fo bsddialog_menu
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int menurows"
.Fa "int nitems"
.Fa "struct bsddialog_menuitem *items"
.Fa "int *focusitem"
.Fc
.Ft int
.Fo bsddialog_mixedgauge
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int mainperc"
.Fa "unsigned int nminibars"
.Fa "char **minilabels"
.Fa "int *minipercs"
.Fc
.Ft int
.Fo bsddialog_mixedlist
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int menurows"
.Fa "int ngroups"
.Fa "struct bsddialog_menugroup *groups"
.Fa "int *focuslist"
.Fa "int *focusitem"
.Fc
.Ft int
.Fo bsddialog_msgbox
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fc
.Ft int
.Fo bsddialog_pause
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int timeout"
.Fc
.Ft int
.Fo bsddialog_radiolist
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int menurows"
.Fa "int nitems"
.Fa "struct bsddialog_menuitem *items"
.Fa "int *focusitem"
.Fc
.Ft int
.Fo bsddialog_rangebox
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fa "int min"
.Fa "int max"
.Fa "int *value"
.Fc
.Ft int
.Fo bsddialog_textbox
.Fa "struct bsddialog_conf *conf"
.Fa "char* file"
.Fa "int rows"
.Fa "int cols"
.Fc
.Ft int
.Fo bsddialog_timebox
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int *hh"
.Fa "unsigned int *mm"
.Fa "unsigned int *ss"
.Fc
.Ft int
.Fo bsddialog_yesno
.Fa "struct bsddialog_conf *conf"
.Fa "char* text"
.Fa "int rows"
.Fa "int cols"
.Fc
.In bsddialog_theme.h
.Ft int
.Fo bsddialog_color
.Fa "enum bsddialog_color background"
.Fa "enum bsddialog_color foreground"
.Fa "unsigned int flags"
.Fc
.Ft int
.Fn bsddialog_get_theme "struct bsddialog_theme *theme"
.Ft int
.Fn bsddialog_set_default_theme "enum bsddialog_default_theme theme"
.Ft int
.Fn bsddialog_set_theme "struct bsddialog_theme *theme"
.Sh DESCRIPTION
The
.Nm bsddialog
library provides an API to build Text User Interface dialogs: to display
messages, to get input and to inform about a computation status.
.Pp
.Fn bsddialog_init
initializes the library, the only functions that can be called before is
.Fn bsddialog_initconf .
After the initialization the input and output should be managed via the library
API.
.Fn bsddialog_end
restores the terminal like before
.Fn bsddialog_init .
.Pp
.Fn bsddialog_error
returns a string to describe the error, it should be called after a
.Dv BSDDIALOG_ERROR
returned value.
.Fn bsddialog_clearterminal
clears the screen.
.Fn bsddialog_backtitle
prints
.Fa backtitle
on the top of the screen,
.Fa conf
is described later in
.Sx Dialogs
subsection,
.Fn bsddialog_backtitle
handles
.Fa ascii_lines
and
.Fa no_lines .
.Pp
Each
.Fa char*
argument has to be a well terminated string, can be empty
.Pq Dq
but not
.Dv NULL .
.Pp
.Ss Dialogs
Each dialog has common arguments:
.Fa text
is a well terminated string printed inside the dialog,
.Fa rows
and
.Fa cols
are height and width between 2 and the screen size,
.Dv BSDDIALOG_AUTOSIZE
or
.Dv
BSDDIALOG_FULLSCREEN .
.Fa conf
is a struct to customize the dialog:
.Bd -literal -offset indent -compact
struct bsddialog_conf {
	bool ascii_lines;
	unsigned int aspect_ratio;
	unsigned int auto_minheight;
	unsigned int auto_minwidth;
	char *bottomtitle;
	bool clear;
	char *f1_file;
	char *f1_message;
	int  *get_height;
	int  *get_width;
	bool no_lines;
	bool shadow;
	unsigned int sleep;
	char *title;
	int  y;
	int  x;
	struct {
		bool enable_esc;
	} key;
	struct {
		bool colors;
	} text;
	struct {
		bool align_left;
		char *default_item;
		bool no_desc;
		bool no_name;
		bool shortcut_buttons;
	} menu;
	struct {
		int  securech;
		bool value_withcancel;
		bool value_withextra;
		bool value_withhelp;
	} form;
	struct {
		bool without_ok;
		char *ok_label;
		bool with_extra;
		char *extra_label;
		bool without_cancel;
		char *cancel_label;
		bool default_cancel;
		bool with_help;
		char *help_label;
		char *exit_label;
		char *generic1_label;
		char *generic2_label;
		char *default_label;
	} button;
};
.Ed
.Fa conf
is local to a dialog, it does not set global properties to the library.
.Bl -column -compact
.It Fa conf.ascii_lines
ascii characters to draw borders.
.It Fa conf.aspect_ratio
takes effects only with
.BSDDIALOG_AUTOSIZE
for infobox, msgbox and yesnobox.
.It Fa conf.auto_minheight
minimum height if
.Fa rows
is
.Dv BSDDIALOG_AUTOSIZE .
.It Fa conf.auto_minwidth
minimum width if
.Fa cols
is
.Dv BSDDIALOG_AUTOSIZE .
.It Fa conf.bottomtitle
subtitle.
.It Fa conf.clear
hides the dialog at exit.
.It Fa conf.f1_file
open the file if F1 is pressed.
.It Fa conf.f1_message
display the message if F1 is pressed.
.It Fa conf.get_height
if not
.Dv NULL
is set like the dialog height.
.It Fa conf.get_width
if not
.Dv NULL
is set like the dialog width.
.It Fa conf.no_lines
not draw borders.
.It Fa conf.shadow
draws a dialog shadow.
.It Fa conf.sleep
the dialog function waits before to return, the time is in seconds,
.It Fa conf.title
title.
.It Fa conf.y
dialog y position, top side is 0, can be
.Dv BSDDIALOG_CENTER .
.It Fa conf.x
dialog x position, left size is 0, can be
.Dv BSDDIALOG_CENTER .
.Ed
.Pp
.It Fa conf.key.enable_esc
enables
.Dv ESC
key to close the dialog.
.Pp
.Fa conf.text.colors
enables the colors in
.Fa text ,
properly the following escapes:
.Bl -column -compact
.It Dq \eZ0
black.
.It Dq \eZ1
red.
.It Dq \eZ2
green.
.It Dq \eZ3
yellow.
.It Dq \eZ4
blue.
.It Dq \eZ5
magenta.
.It Dq \eZ6
cyan.
.It Dq \eZ7
white.
.It Dq \eZr
reverse colors between foreground and background.
.It Dq \eZR
disable reverse.
.It Dq \eZb
bold.
.It Dq \eZB
disable blod.
.It Dq \eZu
underline.
.It Dq \eZU
disable underline.
.It Dq \eZn
disable customization.
.Ed
.Pp
.Bl -column -compact
.It Fa conf.button.without_ok
disable
.Dq OK
button.
.It Fa conf.button.ok_label
set label for
.Dq OK
button.
.It Fa conf.button.with_extra
add an extra button.
.It Fa conf.button.extra_label
set a label for extra button.
.It Fa conf.button.without_cancel
disable cancel button.
.It Fa conf.button.cancel_label
sets label for cancel button.
.It Fa conf.button.default_cancel
on startup focus on the cancel button.
.It Fa conf.button.with_help
add help  button.
.It Fa conf.button.help_label
set label for help button.
.It Fa conf.button.generic1_label
add a button with the specified label.
.It Fa conf.button.generic2_label
add a button with specified label.
.It Fa conf.button.default_label
on startup set focus on the button with label.
.Ed
.Pp
.Fa bsddialog_initconf
initializes
.Fa conf
disabling each property, except
.Fa conf.shadow
and
.Fa conf.y
and
.Fa conf.x
set to
.Dv BSDDIALOG_CENTER .
.Pp
.Fn bsddialog_infobox
builds a dialog only with
.Fa text and returns instantly.
.Fn bsddialog_msgbox
creates a dialog an
.Dq OK
button to show a message.
.Fn bsddialog_yesno
provides a dialog for a
.Dq Yes-No
question, the labels for buttons are
.Dq YES
and
.Dq No
instead of
.Dq OK
and
.Dq Cancel.
.Fn bsddialog_pause
builds a dialog to show a message, waiting until
.Fa timeout ,
in seconds, expires or a button is pressed.
.Pp
.Fn bsddialog_datebox
to select a date,
.Fa yy ,
.Fa mm ,
and
.Fa dd
specify a date on startup and are set like the user choose on return.
.Fn bsddialog_timebox
to choose a time
.Fa hh ,
.Fa mm ,
and
.Fa ss
specify a time on startup and are set like the user choose on return.
.Pp
.Fn bsddialog_checklist ,
.Fn bsddialog_menu
and
.Fn bsddialog_radiolist
to choose 0, 1 or more items from a list.
.Bd -literal -offset indent -compact
struct bsddialog_menuitem {
	char *prefix;
	bool on;
	unsigned int depth;
	char *name;
	char *desc;
	char *bottomdesc;
};
.Ed
.Pp
.Fn bsddialog_mixedlist
to create a menu with checklists and radiolists.
.Fa menurows
are the rows to show the items.
.Bd -literal -offset indent -compact
enum bsddialog_grouptype {
	BSDDIALOG_CHECKLIST,
	BSDDIALOG_RADIOLIST,
	BSDDIALOG_SEPARATOR,
};

struct bsddialog_menugroup {
	enum bsddialog_grouptype type;
	unsigned int nitems;
	struct bsddialog_menuitem *items;
};
.Ed
.Pp
menus can be costomizated by:
.Bl -column -compact
.It Fa conf.menu.align_left
aligns items to left, default center.
.It Fa conf.menu.default_item
on startup focus on a specified item.
.It Fa conf.menu.no_desc.
hide description
.It Fa conf.menu.no_name
hode name.
.It Fa conf.menu.shortcut_buttons
enable shortcut keys on buttons, default on items.
.Ed
.Pp
.Fn bsddialog_form
.Bd -literal -offset indent -compact
struct bsddialog_formitem {
	char *label;
	unsigned int ylabel;
	unsigned int xlabel;

	char *init;
	unsigned int yfield;
	unsigned int xfield;
	unsigned int fieldlen;
	unsigned int maxvaluelen;
	char *value;

	unsigned int flags;

	char *bottomdesc;
};
.Ed
.Dv BSDDIALOG_FIELDHIDDEN
.Dv BSDDIALOG_FIELDREADONLY
.Fa conf.form.securech
If the Ok button is pressed each
.Fa value
is allocated with its current field, it is possible enabling
.Fa conf.form.value_withcancel ,
.Fa conf.form.value_withextra
and
.Fa conf.form.value_withhelp
to get values.
.Pp
.Fn bsddialog_gauge
opens a dialog with a
.Fa perc
bar, if
.Fa separator
is not
.Dv NULL
.Fn bsddialog_gaude
waits to read
.Fa separator
from the standard input, then the first string is used like a new
.Fa perc
and the next strings are like new
.Fa text ,
the loop ends reading
.Dv EOF .
.Pp
.Fn bsddialog_mixedgauge
draw a main bar with
.Fa mainperc
percentage and
.Fa nminibars
mini percentages, each one with a
.Fa minilabel
and
.fa miniperc
with a value between 0 and 100 or
.Dv BSDDIALOG_MG_SUCCEEDED ,
.Dv BSDDIALOG_MG_FAILED ,
.Dv BSDDIALOG_MG_PASSED ,
.Dv BSDDIALOG_MG_COMPLETED ,
.Dv BSDDIALOG_MG_CHECKED ,
.Dv BSDDIALOG_MG_DONE ,
.Dv BSDDIALOG_MG_SKIPPED ,
.Dv BSDDIALOG_MG_INPROGRESS ,
.Dv BSDDIALOG_MG_BLANK ,
.Dv BSDDIALOG_MG_NA
or
.Dv BSDDIALOG_MG_PENDING
to print a descriptive string.
.Pp
.Fn bsddialog_rangebox
to select a value between
.Fa min
and
.Fa max .
.Fa value
is the default value on startup and the selected value at exit.
The current value is printed inside a bar, UP, DOWN, HOME, END, PAGEUP and
PAGEDOWN keys can change.
.Pp
.Fn bsddialog_textbox
open
.Fa file
and shows it,
the
.Dq OK
button is rename
.Dq EXIT.
.Pp
.Ss Theme
The
.Fa struct bsddialog_theme
represents graphical properties, it is global to the library,
.Nm BSDDialog
to set it at runtime via
.Sx Theme
API.
.Pp
.Bd -literal -offset indent -compact
struct bsddialog_theme {
	struct {
		int color;
	} screen;
	struct {
		int color;
		unsigned int h;
		unsigned int w;
	} shadow;
	struct {
		int  color;
		bool delimtitle;
		int  titlecolor;
		int  lineraisecolor;
		int  linelowercolor;
		int  bottomtitlecolor;
	} dialog;
	struct {
		unsigned int hmargin;
	} text;
	struct {
		int arrowcolor;
		int selectorcolor;
		int f_namecolor;
		int namecolor;
		int f_desccolor;
		int desccolor;
		int namesepcolor;
		int descsepcolor;
		int f_shortcutcolor;
		int shortcutcolor;
	} menu;
	struct {
		int f_fieldcolor;
		int fieldcolor;
		int readonlycolor;
	} form;
	struct {
		int f_color;
		int color;
	} bar;
	struct {
		unsigned int space;
		int leftch;
		int rightch;
		int delimcolor;
		int f_delimcolor;
		int color;
		int f_color;
		int shortcutcolor;
		int f_shortcutcolor;
	} button;
};
.Ed
The member with the prefix
.Dq d_
refers to elements with focus.
.Pp
.Fn bsddialog_get_theme
sets
.Fa theme like the current theme, the members
.Dq color
can be set by the value returned by
.Fn bsddialog_color ,
this function gets
.Fa background
and
.Fa foreground
.Dv BSDDIALOG_BLACK ,
.Dv BSDDIALOG_RED ,
.Dv BSDDIALOG_GREEN ,
.Dv BSDDIALOG_YELLOW ,
.Dv BSDDIALOG_BLUE ,
.Dv BSDDIALOG_MAGENTA ,
.Dv BSDDIALOG_CYAN ,
and
.Dv BSDDIALOG_WHITE
.Dv BSDDIALOG_BOLD ,
.Dv BSDDIALOG_REVERSE
and
.Dv BSDDIALOG_UNDERLINE .
.Pp
.Fn bsddialog_set_theme
sets
.Fa theme like current theme
.Pp
.Nm BSDDialog
provides predefined themes
.Fa nsddialog_default_theme,
it can be set via
.Fn bsddialog_set_default_theme ,
possible values:
.Fa BSDDIALOG_THEME_BLACKWHITE ,
.Fa BSDDIALOG_THEME_BSDDIALOG ,
.Fa BSDDIALOG_THEME_DEFAULT
and
.Fa BSDDIALOG_THEME_DIALOG .
.Pp
.Sh RETURN VALUES
The functions return the value
.Dv BSDDIALOG_ERROR
if unsuccessful;
otherwise, depending on the pressed button or key, the following values can be
returned:
.Dv BSDDIALOG_OK ,
.Dv BSDDIALOG_YES ,
.Dv BSDDIALOG_CANCEL ,
.Dv BSDDIALOG_NO ,
.Dv BSDDIALOG_HELP ,
.Dv BSDDIALOG_EXTRA ,
.Dv BSDDIALOG_TIMEOUT ,
.Dv BSDDIALOG_ESC ,
.Dv BSDDIALOG_GENERIC1
or
.Dv BSDDIALOG_GENERIC2 .
.Sh EXAMPLES
Complete set of examples:
.Lk https://gitlab.com/alfix/bsddialog/-/blob/main/examples_library/
.Pp
If installed:
.Dl /usr/local/share/examples/libbsddialog
.Pp
"Yes-No Question" Example:
.Pp
.Bd -literal -offset indent -compact
int output;
struct bsddialog_conf conf;

bsddialog_initconf(&conf);
conf.title = "yesno";
if (bsddialog_init() == BSDDIALOG_ERROR)
	return (1);

output = bsddialog_yesno(&conf, "Example", 7, 25);

bsddialog_end();

switch (output) {
case BSDDIALOG_YES:
	printf("Yes\\n");
	break;
case BSDDIALOG_NO
	printf("NO\\n");
	break;
case BSDDIALOG_ERROR:
	printf("Error: %s\\n", bsddialog_geterror());
}
.Ed
.Sh SEE ALSO
.Xr bsddialog 1
.Sh HISTORY
The
.Nm bsddialog
library first appeared in
.Fx 14.0 .
.Sh AUTHORS
.Nm bsddialog
was written by
.An Alfonso Sabato Siciliano Aq Mt alf.siciliano@gmail.com .
.Sh BUGS
Cols autosize assigns max one line to
.Fa text ,
the remaining part is hidden.
.Fn bsddialog_form
does not handle screen resize and does not provides scrolling.
