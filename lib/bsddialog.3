.\"
.\" Copyright (c) 2021-2022 Alfonso Sabato Siciliano
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd January 7, 2022
.Dt BSDDIALOG 3
.Os
.Sh NAME
.Nm bsddialog_backtitle ,
.Nm bsddialog_clearterminal ,
.Nm bsddialog_color ,
.Nm bsddialog_checklist ,
.Nm bsddialog_datebox ,
.Nm bsddialog_end ,
.Nm bsddialog_form ,
.Nm bsddialog_gauge ,
.Nm bsddialog_geterror ,
.Nm bsddialog_get_theme
.Nm bsddialog_infobox ,
.Nm bsddialog_init ,
.Nm bsddialog_initconf ,
.Nm bsddialog_menu ,
.Nm bsddialog_mixedgauge ,
.Nm bsddialog_mixedlist ,
.Nm bsddialog_msgbox ,
.Nm bsddialog_pause ,
.Nm bsddialog_radiolist ,
.Nm bsddialog_rangebox ,
.Nm bsddialog_set_theme ,
.Nm bsddialog_set_default_theme ,
.Nm bsddialog_textbox ,
.Nm bsddialog_timebox ,
.Nm bsddialog_yesno
.Nd TUI dialogs
.Sh LIBRARY
.Lb libbsddialog
.Sh SYNOPSIS
.In bsddialog.h
.Ft int
.Fn bsddialog_backtitle "struct bsddialog_conf *conf" "const char *backtitle"
.Ft int
.Fo bsddialog_checklist
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int menurows"
.Fa "int nitems"
.Fa "struct bsddialog_menuitem *items"
.Fa "int *focusitem"
.Fc
.Ft int
.Fn bsddialog_clearterminal "void"
.Ft int
.Fo bsddialog_datebox"
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int *yy"
.Fa "unsigned int *mm"
.Fa "unsigned int *dd"
.Fc
.Ft int
.Fn bsddialog_end "void"
.Ft int
.Fo bsddialog_form
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int formheight"
.Fa "unsigned int nitems"
.Fa "struct bsddialog_formitem *items"
.Fc
.Ft int
.Fo bsddialog_gauge
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int perc"
.Fa "const char *sep"
.Fc
.Ft const char *
.Fn bsddialog_geterror "void"
.Ft int
.Fo bsddialog_infobox
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fc
.Ft int
.Fn bsddialog_init "void"
.Ft int
.Fn bsddialog_initconf "struct bsddialog_conf *conf"
.Ft int
.Fo bsddialog_menu
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int menurows"
.Fa "int nitems"
.Fa "struct bsddialog_menuitem *items"
.Fa "int *focusitem"
.Fc
.Ft int
.Fo bsddialog_mixedgauge
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int mainperc"
.Fa "unsigned int nminibars"
.Fa "char **minilabels"
.Fa "int *minipercs"
.Fc
.Ft int
.Fo bsddialog_mixedlist
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int menurows"
.Fa "int ngroups"
.Fa "struct bsddialog_menugroup *groups"
.Fa "int *focuslist"
.Fa "int *focusitem"
.Fc
.Ft int
.Fo bsddialog_msgbox
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fc
.Ft int
.Fo bsddialog_pause
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int seconds"
.Fc
.Ft int
.Fo bsddialog_radiolist
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int menurows"
.Fa "int nitems"
.Fa "struct bsddialog_menuitem *items"
.Fa "int *focusitem"
.Fc
.Ft int
.Fo bsddialog_rangebox
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fa "int min"
.Fa "int max"
.Fa "int *value"
.Fc
.Ft int
.Fo bsddialog_textbox
.Fa "struct bsddialog_conf *conf"
.Fa "char *file"
.Fa "int rows"
.Fa "int cols"
.Fc
.Ft int
.Fo bsddialog_timebox
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fa "unsigned int *hh"
.Fa "unsigned int *mm"
.Fa "unsigned int *ss"
.Fc
.Ft int
.Fo bsddialog_yesno
.Fa "struct bsddialog_conf *conf"
.Fa "const char *text"
.Fa "int rows"
.Fa "int cols"
.Fc
.In bsddialog_theme.h
.Ft int
.Fo bsddialog_color
.Fa "enum bsddialog_color background"
.Fa "enum bsddialog_color foreground"
.Fa "unsigned int flags"
.Fc
.Ft int
.Fn bsddialog_get_theme "struct bsddialog_theme *theme"
.Ft int
.Fn bsddialog_set_default_theme "enum bsddialog_default_theme theme"
.Ft int
.Fn bsddialog_set_theme "struct bsddialog_theme *theme"
.Sh DESCRIPTION
The
.Nm bsddialog
library provides an API to build Text User Interface dialogs: to display
messages, to get input and to inform about a computation status.
.Pp
.Fn bsddialog_init
initializes the library, the only functions that can be called before is
.Fn bsddialog_initconf .
After the initialization the input and output should be handled via the library
API.
.Fn bsddialog_end
restores the screen like before
.Fn bsddialog_init ,
then it is not possible to use the library functions.
.Pp
.Fn bsddialog_error
returns a string to describe the error, it should be called after a
.Dv BSDDIALOG_ERROR
returned value.
.Fn bsddialog_clearterminal
clears the screen.
.Fn bsddialog_backtitle
prints
.Fa backtitle
on the top of the screen, it is possible to set
.Fa conf.ascii_lines
and
.Fa conf.no_lines ;
.Fa conf
is described later,
.Pp
Each
.Fa char*
argument has to be a well terminated string, can be empty
.Pq Dq
but not
.Dv NULL .
.Ss Dialogs
The dialogs have common arguments.
.Fa text
is a string printed inside the dialog.
.Fa rows
and
.Fa cols
are height and width, their value can be between 2 and the screen size,
.Dv BSDDIALOG_AUTOSIZE
or
.Dv
BSDDIALOG_FULLSCREEN .
.Fa conf
is a struct to customize the dialog, it does not set global properties to the
library, it is local to its dialog.
.Pp
.Bd -literal -offset indent -compact
struct bsddialog_conf {
	bool ascii_lines;
	unsigned int aspect_ratio;
	unsigned int auto_minheight;
	unsigned int auto_minwidth;
	const char *bottomtitle;
	bool clear;
	const char *f1_file;
	const char *f1_message;
	int *get_height;
	int *get_width;
	bool no_lines;
	bool shadow;
	unsigned int sleep;
	const char *title;
	int y;
	int x;
	struct {
		bool enable_esc;
	} key;
	struct {
		bool highlight;
	} text;
	struct {
		bool align_left;
		bool no_desc;
		bool no_name;
		bool shortcut_buttons;
	} menu;
	struct {
		int  securech;
		bool value_withcancel;
		bool value_withextra;
		bool value_withhelp;
	} form;
	struct {
		bool without_ok;
		const char *ok_label;
		bool with_extra;
		const char *extra_label;
		bool without_cancel;
		const char *cancel_label;
		bool default_cancel;
		bool with_help;
		const char *help_label;
		const char *generic1_label;
		const char *generic2_label;
		const char *default_label;
	} button;
};
.Ed
.Pp
.Bl -column -compact
.It Fa conf.ascii_lines
ascii characters to draw lines, default wide characters.
.It Fa conf.aspect_ratio
set an aspect ratio with
.Dv BSDDIALOG_AUTOSIZE
for infobox, msgbox and yesnobox.
.It Fa conf.auto_minheight
minimum height if
.Fa rows
is
.Dv BSDDIALOG_AUTOSIZE .
.It Fa conf.auto_minwidth
minimum width if
.Fa cols
is
.Dv BSDDIALOG_AUTOSIZE .
.It Fa conf.bottomtitle
subtitle at the dialog bottom side.
.It Fa conf.clear
hide the dialog at exit.
.It Fa conf.f1_file
path to a file to open if F1 is pressed.
.It Fa conf.f1_message
display the message if F1 is pressed.
.It Fa conf.get_height
if not
.Dv NULL
is set like the dialog height at exit.
.It Fa conf.get_width
if not
.Dv NULL
is set like the dialog width at exit.
.It Fa conf.no_lines
not draw lines.
.It Fa conf.shadow
draw a shadow.
.It Fa conf.sleep
the dialog function waits before to return, the value is in seconds.
.It Fa conf.title
title at the top dialog side.
.It Fa conf.y
dialog y position, 0 it the top screen, can be
.Dv BSDDIALOG_CENTER .
.It Fa conf.x
dialog x position, 0 is the left screen side, can be
.Dv BSDDIALOG_CENTER .
.Ed
.Pp
.It Fa conf.key.enable_esc
enables
.Dv ESC
key to close the dialog.
.Pp
.Fa conf.text.highlight
enables highlights for
.Fa text ,
properly the following sequences are considered escapes:
.Bl -column -compact
.It Dq \eZ0
black.
.It Dq \eZ1
red.
.It Dq \eZ2
green.
.It Dq \eZ3
yellow.
.It Dq \eZ4
blue.
.It Dq \eZ5
magenta.
.It Dq \eZ6
cyan.
.It Dq \eZ7
white.
.It Dq \eZr
reverse colors between foreground and background.
.It Dq \eZR
disable reverse.
.It Dq \eZb
bold.
.It Dq \eZB
disable blod.
.It Dq \eZu
underline.
.It Dq \eZU
disable underline.
.It Dq \eZn
disable each customization.
.Ed
.Pp
.Bl -column -compact
.It Fa conf.button.without_ok
disable OK button.
.It Fa conf.button.ok_label
set label for OK button.
.It Fa conf.button.with_extra
add Extra button.
.It Fa conf.button.extra_label
set a label for Extra button.
.It Fa conf.button.without_cancel
disable Cancel button.
.It Fa conf.button.cancel_label
sets a label for Cancel button.
.It Fa conf.button.default_cancel
on startup focus on the Cancel button.
.It Fa conf.button.with_help
add Help button.
.It Fa conf.button.help_label
set a label for Help button.
.It Fa conf.button.generic1_label
add a button with the specified label.
.It Fa conf.button.generic2_label
add a button with the specified label.
.It Fa conf.button.default_label
focus on the button with label.
.Ed
.Pp
.Fa bsddialog_initconf
initializes
.Fa conf
disabling each property, except
.Fa conf.shadow
to true,
.Fa conf.y
and
.Fa conf.x
to
.Dv BSDDIALOG_CENTER .
.Pp
.Fn bsddialog_infobox
builds a dialog without buttons and returns instantly.
.Fn bsddialog_msgbox
builds a dialog with only OK an button.
.Fn bsddialog_yesno
provides a dialog for a
.Dq Yes-No Question ,
the labels on buttons are Yes and No.
.Pp
.Fn bsddialog_pause
builds a dialog waiting until the timeout in
.Fa seconds
expires or a button is pressed.
.Pp
.Fn bsddialog_datebox
builds a dialog to select a date, on startup
.Fa yy ,
.Fa mm ,
and
.Fa dd
specify a date on startup and are set like the user choice on return.
.Fn bsddialog_timebox
builds a dialog to choose a time,
.Fa hh ,
.Fa mm ,
and
.Fa ss
specify a time on startup and are set like the user choice on return.
.Pp
.Fn bsddialog_checklist ,
.Fn bsddialog_menu
and
.Fn bsddialog_radiolist
build dialogs to chooce some item from a menu, properly an item is defined like:
.Pp
.Bd -literal -offset indent -compact
struct bsddialog_menuitem {
	const char *prefix;
	bool on;
	unsigned int depth;
	const char *name;
	const char *desc;
	const char *bottomdesc;
};
.Ed
.Pp
An item has:
.Fa prefix ,
.Fa name
and
.Fa desc
printed on its row,
.Fa bottomdesc
printed on the bottom side of the screen if the item is focused,
.Fa depth
is a margin between the
.Fa prefix
and
.Fa name
useful to implement a treeview,
.Fa on
is set to
.Dv true
if the user selects the item,
.Dv false
otherwise.
.Fa items
is an array of items of
.Fa nitem
elements,
.Fa menurows
specifies the graphical size of the menu, if
.Fa cols
is set to
.Dv BSDDIALOG_AUTOSIZE
.Fa menirows
specifies a maximum value not a fixed.
Finally, if not
.Dv NULL,
.Fa focusitem
specifies the default item on startup and the focused item at exit, could be
a negative value is no item is focused.
.Pp
.Fn bsddialog_mixedlist
builds a dialog with a collections of checklists, radiolists and separators.
A collection is a set defined like:
.Fa menurows
are the rows to show the items.
.Pp
.Bd -literal -offset indent -compact
enum bsddialog_grouptype {
	BSDDIALOG_CHECKLIST,
	BSDDIALOG_RADIOLIST,
	BSDDIALOG_SEPARATOR,
};

struct bsddialog_menugroup {
	enum bsddialog_grouptype type;
	unsigned int nitems;
	struct bsddialog_menuitem *items;
};
.Ed
.Pp
.Fa ngroups
is the number of collections,
.Fa groups .
.Fa menurows
is the graphical height size for the menu.
If not
.NULL
.Fa focuslist
and
.Fa focusitem
specify the default item before the call and the focused item at exit, could be
negative if no item is focused.
.Pp
.Fn bsddialog_checklist ,
.Fn bsddialog_menu ,
.Fn bsddialog_mixedlist
and
.Fn bsddialog_radiolist
can be costomizated by:
.Bl -column -compact
.It Fa conf.menu.align_left
aligns items to left, default center.
.It Fa conf.menu.no_desc.
hide description.
.It Fa conf.menu.no_name
hide names.
.It Fa conf.menu.shortcut_buttons
enable shortcut keys on buttons, default on items.
.Ed
.Pp
.Fn bsddialog_form
.Bd -literal -offset indent -compact
struct bsddialog_formitem {
	const char *label;
	unsigned int ylabel;
	unsigned int xlabel;

	const char *init;
	unsigned int yfield;
	unsigned int xfield;
	unsigned int fieldlen;
	unsigned int maxvaluelen;
	char *value;

	unsigned int flags;

	const char *bottomdesc;
};
.Ed
.Pp
.It Fa value
is allocated with the current field it the OK button is pressed.
.Dv BSDDIALOG_FIELDHIDDEN
and
.Dv BSDDIALOG_FIELDREADONLY
are OK-flags for
.Fa flags .
.Pp
.Fn bsddialog_form
can be customized by:
.Bl -column -compact
.It Fa conf.form.securech
with
.Dv BSDDIALOG_FIELDHIDDEN
set the charachter to hide the input.
.It Fa conf.form.value_withcancel
set
.Fa value
also if the Cancel button is pressed.
.It Fa conf.form.value_withextra
set
.Fa value
also if the Extra button is pressed.
.It Fa conf.form.value_withhelp
set
.Fa value
also if the Help button is pressed.
.Ed
.Pp
.Fn bsddialog_gauge
opens a dialog with a
.Fa perc
bar, if
.Fa separator
is not
.Dv NULL
the dialog waits to read
.Fa separator
from the standard input, then the first string is used like a new
.Fa perc
and the next strings are like new
.Fa text ,
the loop ends reading
.Dv EOF .
.Pp
.Fn bsddialog_mixedgauge
draw a main bar with
.Fa mainperc
percentage and
.Fa nminibars
each one with a
.Fa minilabel
and a
.Fa miniperc
with a value between 0 and 100 or
.Dv BSDDIALOG_MG_SUCCEEDED ,
.Dv BSDDIALOG_MG_FAILED ,
.Dv BSDDIALOG_MG_PASSED ,
.Dv BSDDIALOG_MG_COMPLETED ,
.Dv BSDDIALOG_MG_CHECKED ,
.Dv BSDDIALOG_MG_DONE ,
.Dv BSDDIALOG_MG_SKIPPED ,
.Dv BSDDIALOG_MG_INPROGRESS ,
.Dv BSDDIALOG_MG_BLANK ,
.Dv BSDDIALOG_MG_NA
or
.Dv BSDDIALOG_MG_PENDING
to print a descriptive string.
.Pp
.Fn bsddialog_rangebox
to select a value between
.Fa min
and
.Fa max .
.Fa value
is the default value on startup and the selected value at exit.
The current value is printed inside a bar.
UP, DOWN, HOME, END, PAGEUP and PAGEDOWN keys can change it.
.Pp
.Fn bsddialog_textbox
opens and prints
.Fa file ,
in a dialog, the UP, DOWN, HOME, END, PAGEUP and PAGEDOWN keys are availble to
navigate the file.
OK button is renamed EXIT.
.Ss Theme
The graphical properties are global to the library, they are represented by
.Fa struct bsddialog_theme
and can be customized at runtime via the
.In bsddialog_theme.h
API.
.Pp
.Bd -literal -offset indent -compact
struct bsddialog_theme {
	struct {
		int color;
	} screen;
	struct {
		int color;
		unsigned int h;
		unsigned int w;
	} shadow;
	struct {
		int  color;
		bool delimtitle;
		int  titlecolor;
		int  lineraisecolor;
		int  linelowercolor;
		int  bottomtitlecolor;
	} dialog;
	struct {
		unsigned int hmargin;
	} text;
	struct {
		int arrowcolor;
		int selectorcolor;
		int f_namecolor;
		int namecolor;
		int f_desccolor;
		int desccolor;
		int namesepcolor;
		int descsepcolor;
		int f_shortcutcolor;
		int shortcutcolor;
	} menu;
	struct {
		int f_fieldcolor;
		int fieldcolor;
		int readonlycolor;
	} form;
	struct {
		int f_color;
		int color;
	} bar;
	struct {
		unsigned int space;
		int leftch;
		int rightch;
		int delimcolor;
		int f_delimcolor;
		int color;
		int f_color;
		int shortcutcolor;
		int f_shortcutcolor;
	} button;
};
.Ed
.Pp
A member with the
.Dq f_
prefix refers to an element with focus.
.Pp
.Fn bsddialog_get_theme
sets
.Fa theme
like the current theme.
.Pp
A color can be set by the value returned by
.Fn bsddialog_color ,
Possible values for
.Fa background
and
.Fa foreground
are:
.Dv BSDDIALOG_BLACK ,
.Dv BSDDIALOG_RED ,
.Dv BSDDIALOG_GREEN ,
.Dv BSDDIALOG_YELLOW ,
.Dv BSDDIALOG_BLUE ,
.Dv BSDDIALOG_MAGENTA ,
.Dv BSDDIALOG_CYAN ,
and
.Dv BSDDIALOG_WHITE ,
.Fa flags
specifies OR-flags, possible values:
.Dv BSDDIALOG_BOLD ,
.Dv BSDDIALOG_REVERSE
and
.Dv BSDDIALOG_UNDERLINE .
.Pp
.Fn bsddialog_set_theme
sets
.Fa theme
like current theme, the changes takes effect only for dialogs built after the
call.
.Pp
The library provides predefined themes:
.Dv BSDDIALOG_THEME_BLACKWHITE ,
.Dv BSDDIALOG_THEME_BSDDIALOG ,
.Dv BSDDIALOG_THEME_DEFAULT
and
.Dv BSDDIALOG_THEME_DIALOG ,
they can be set via
.Fn bsddialog_set_default_theme .
.Pp
.Sh RETURN VALUES
The functions return the value
.Dv BSDDIALOG_ERROR
if unsuccessful;
otherwise, depending on the pressed button, the following values can be
returned:
.Dv BSDDIALOG_OK ,
.Dv BSDDIALOG_CANCEL ,
.Dv BSDDIALOG_HELP ,
.Dv BSDDIALOG_EXTRA ,
.Dv BSDDIALOG_GENERIC1
or
.Dv BSDDIALOG_GENERIC2 .
.Dv BSDDIALOG_YES
and
.Dv BSDDIALOG_NO
are aliases for
.Dv BSDDIALOG_OK
and
.Dv BSDDIALOG_CANCEL ,
respectively.
.Pp
The functions return
.Dv BSDDIALOG_ESC
if
.Fa conf.key.enable_esc
is enabled and the ESC key is pressed.
.Pp
.Fn bsddialog_pause
returns
.Dv BSDDIALOG_TIMEOUT
if the timeout expires.
.Sh EXAMPLES
.Pp
.Dq Yes-No Question
Example:
.Pp
.Bd -literal -offset indent -compact
int output;
struct bsddialog_conf conf;

bsddialog_initconf(&conf);
conf.title = "yesno";
if (bsddialog_init() == BSDDIALOG_ERROR)
	return (1);

output = bsddialog_yesno(&conf, "Example", 7, 25);

bsddialog_end();

switch (output) {
case BSDDIALOG_YES:
	printf("Yes\\n");
	break;
case BSDDIALOG_NO
	printf("NO\\n");
	break;
case BSDDIALOG_ERROR:
	printf("Error: %s\\n", bsddialog_geterror());
}
.Ed
.Pp
Theme Example:
.Pp
.Bd -literal -offset indent -compact
struct bsddialog_conf conf;
struct bsddialog_theme theme;

bsddialog_initconf(&conf);

if (bsddialog_init() == BSDDIALOG_ERROR)
	return (1);

bsddialog_msgbox(&conf, "Default theme", 7, 25);

bsddialog_get_theme(&theme);
theme.screen.color = bsddialog_color(BSDDIALOG_RED, BSDDIALOG_GREEN,
    BSDDIALOG_BOLD);
bsddialog_set_theme(&theme);
bsddialog_backtitle(&conf, "Red foreground and Green background");
bsddialog_msgbox(&conf, "Change screen color", 7, 25);

bsddialog_set_default_theme(BSDDIALOG_THEME_BLACKWHITE);
bsddialog_msgbox(&conf, "Black and White theme", 7, 25);

bsddialog_end();
.Ed
.Sh SEE ALSO
.Xr bsddialog 1 ,
.Xr ncurses 3 .
.Sh HISTORY
The
.Nm bsddialog
library first appeared in
.Fx 14.0 .
.Sh AUTHORS
.Nm bsddialog
was written by
.An Alfonso Sabato Siciliano Aq Mt alf.siciliano@gmail.com .
.Sh BUGS
If
.Fa rows
is
.Dv BSDDIALOG_AUTOSIZE
only one line is reserved to
.Fa text ,
the remaining part is hidden.
.Fn bsddialog_form
does not handle screen resize and does not provides scrolling.
